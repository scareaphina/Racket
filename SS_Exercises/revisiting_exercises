(require rackunit)

; lists

; (check-equal? (function variable(s)) desired result)

; some fresh approaches to old problems

; 4.4

(define (square n)
  (* n n))

(define (cube n)
  (* n (square n)))

(define (sphere-volume r)
  (* (* (/ 4 3) 3.141592654)
     (cube r)))

(sphere-volume 3)

; the problem was that the first part was not multiplying by the second part
; also defining it with cube as a nested function makes it easier to read 

(define (next x)
  (+ x 1))

(next 1)
(next 3)

; arithmetic goes first

(define (square x)
  (* x x))
  
; have to define with a variable

(define (triangle-area base height)
  (* 0.5 (* base height)))

(triangle-area 3 4)

; wrong variables

(define (square x)
  (* x x))

(define (sum-of-squares x y)
  (+ (square x) (square y)))

; have to define square ahead of time
; don't define a function in terms of another function in that format

; 4.5

; F=9⁄5C+32

(define (cel-to-fahr celcius)
  (+ (* (/ 9 5) celcius) 32))

(cel-to-fahr 32)

; C=5⁄9(F-32)

(define (fahr-to-cel fahrenheit)
  (* (/ 5 9) (- fahrenheit 32)))

(fahr-to-cel 100)

; 4.6

(define (square n)
  (* n n))

(define (cube n)
  (* n (square n)))

(define (forth n)
  (* n (cube n)))

(forth 3)

(define (forth1 n)
  (* n (* n (* n (* n)))))

(forth1 3)

; 4.7

(define (square n)
  (* n n))

(define (absval arg)
  (sqrt (square arg)))

(absval 200)
(absval .032)

; 4.9

(define (percentage amount)
  (* amount .01))

(percentage 5)
(percentage 10)
(percentage 200)

(define (discount price percent)
  (* price (percentage percent)))

(discount 10 5)
(discount 29.90 50)

; 5.2

(define (f1 first second)
  (se (cadr first)
      (caddr first)
      (car second)
      (cadr second)))

(f1 '(a b c) '(d e f))



(define (f2 first second)
  (se (cadr first)
      (caddr first)
      (car second)
      (cadr second)
      (word (car first)
            (caddr second))))

(f2 '(a b c) '(d e f))



(define (f3 first second)
  (se (car first)
      (cadr first)
      (caddr first)
      (car first)
      (cadr first)
      (caddr first)))

(f3 '(a b c) '(d e f))


       
(define (f4 first second)
  (word (car (cdr first))
        (car (cdr second))))

(f4 '(a b c) '(d e f))

; 5.14

(define (third sent)
  (first (bf (bf sent))))

(third '(lucy in the sky with diamonds))
(third 'elephant)

; 5.15

(define (two-first 1st 2nd)
  (word (first 1st)
        (first 2nd)))

(two-first 'brian 'epstein)

; 5.15

(define (first-two sent)
  (word (first sent) (first (bf sent))))

(first-two 'cat)
(first-two 'elephant)

; 5.16

(define (two-first word1 word2)
  (word (first word1) (first word2)))

(two-first 'brian 'epstein)

(define (two-first sent)
  (word (first (first sent))
        (first (first (butfirst sent)))))

(two-first '(brian epstein))

; 5.17

(define (knight name)
  (se '(sir) name))

(knight 'powell)
(knight 'malizia)

; 5.19

(define (insert-and sent)
  (se (bl sent) 'and (last sent)))

(insert-and '(john bill wayne fred joey))
(insert-and '(dave dee dozy beeky mick titch))

; 5.20

(define (middle-names sent)
  (bl (bf sent)))

(middle-names '(james paul mccartney))
(middle-names '(bugs bunny))
(middle-names '(john ronald raoul tolkien))

; 5.21

(define (query sent)
  (se (first (bf sent)) (first sent) (bf sent) '?))

(query '(you are experienced))
(query '(i should have known better))

; 6.7

(define (type-of sent)
  (cond ((integer? sent) 'number)
        ((sentence? sent) 'sentence)
        ((word? sent) 'word)
        ((boolean? sent) 'boolean)
        (else '(type not found))))

(type-of '(getting better))
(type-of 'revolution)
(type-of (= 3 3))

















