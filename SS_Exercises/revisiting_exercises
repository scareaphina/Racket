(require rackunit)

; lists

; (check-equal? (function variable(s)) desired result)

; some fresh approaches to old problems

; 4.4

(define (square n)
  (* n n))

(define (cube n)
  (* n (square n)))

(define (sphere-volume r)
  (* (* (/ 4 3) 3.141592654)
     (cube r)))

(sphere-volume 3)

; the problem was that the first part was not multiplying by the second part
; also defining it with cube as a nested function makes it easier to read 

(define (next x)
  (+ x 1))

(next 1)
(next 3)

; arithmetic goes first

(define (square x)
  (* x x))
  
; have to define with a variable

(define (triangle-area base height)
  (* 0.5 (* base height)))

(triangle-area 3 4)

; wrong variables

(define (square x)
  (* x x))

(define (sum-of-squares x y)
  (+ (square x) (square y)))

; have to define square ahead of time
; don't define a function in terms of another function in that format

; 4.5

; F=9⁄5C+32

(define (cel-to-fahr celcius)
  (+ (* (/ 9 5) celcius) 32))

(cel-to-fahr 32)

; C=5⁄9(F-32)

(define (fahr-to-cel fahrenheit)
  (* (/ 5 9) (- fahrenheit 32)))

(fahr-to-cel 100)

; 4.6

(define (square n)
  (* n n))

(define (cube n)
  (* n (square n)))

(define (forth n)
  (* n (cube n)))

(forth 3)

(define (forth1 n)
  (* n (* n (* n (* n)))))

(forth1 3)

; 4.7

(define (square n)
  (* n n))

(define (absval arg)
  (sqrt (square arg)))

(absval 200)
(absval .032)









