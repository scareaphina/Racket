(require rackunit)

; (check-equal? (function variable(s)) desired result)

; some fresh approaches to old problems

; 4.4

(define (square n)
  (* n n))

(define (cube n)
  (* n (square n)))

(define (sphere-volume r)
  (* (* (/ 4 3) 3.141592654)
     (cube r)))

(sphere-volume 3)

; the problem was that the first part was not multiplying by the second part
; also defining it with cube as a nested function makes it easier to read 

(define (next x)
  (+ x 1))

(next 1)
(next 3)

; arithmetic goes first

(define (square x)
  (* x x))
  
; have to define with a variable

(define (triangle-area base height)
  (* 0.5 (* base height)))

(triangle-area 3 4)

; wrong variables

(define (square x)
  (* x x))

(define (sum-of-squares x y)
  (+ (square x) (square y)))

; have to define square ahead of time
; don't define a function in terms of another function in that format

; 4.5

; F=9⁄5C+32

(define (cel-to-fahr celcius)
  (+ (* (/ 9 5) celcius) 32))

(cel-to-fahr 32)

; C=5⁄9(F-32)

(define (fahr-to-cel fahrenheit)
  (* (/ 5 9) (- fahrenheit 32)))

(fahr-to-cel 100)

; 4.6

(define (square n)
  (* n n))

(define (cube n)
  (* n (square n)))

(define (forth n)
  (* n (cube n)))

(forth 3)

(define (forth1 n)
  (* n (* n (* n (* n)))))

(forth1 3)

; 4.7

(define (square n)
  (* n n))

(define (absval arg)
  (sqrt (square arg)))

(absval 200)
(absval .032)

; 4.9

(define (percentage amount)
  (* amount .01))

(percentage 5)
(percentage 10)
(percentage 200)

(define (discount price percent)
  (* price (percentage percent)))

(discount 10 5)
(discount 29.90 50)

; 5.2

(define (f1 first second)
  (se (cadr first)
      (caddr first)
      (car second)
      (cadr second)))

(f1 '(a b c) '(d e f))



(define (f2 first second)
  (se (cadr first)
      (caddr first)
      (car second)
      (cadr second)
      (word (car first)
            (caddr second))))

(f2 '(a b c) '(d e f))



(define (f3 first second)
  (se (car first)
      (cadr first)
      (caddr first)
      (car first)
      (cadr first)
      (caddr first)))

(f3 '(a b c) '(d e f))


       
(define (f4 first second)
  (word (car (cdr first))
        (car (cdr second))))

(f4 '(a b c) '(d e f))

; 5.14

(define (third sent)
  (first (bf (bf sent))))

(third '(lucy in the sky with diamonds))
(third 'elephant)

; 5.15

(define (two-first 1st 2nd)
  (word (first 1st)
        (first 2nd)))

(two-first 'brian 'epstein)

; 5.15

(define (first-two sent)
  (word (first sent) (first (bf sent))))

(first-two 'cat)
(first-two 'elephant)

; 5.16

(define (two-first word1 word2)
  (word (first word1) (first word2)))

(two-first 'brian 'epstein)

(define (two-first sent)
  (word (first (first sent))
        (first (first (butfirst sent)))))

(two-first '(brian epstein))

; 5.17

(define (knight name)
  (se '(sir) name))

(knight 'powell)
(knight 'malizia)

; 5.19

(define (insert-and sent)
  (se (bl sent) 'and (last sent)))

(insert-and '(john bill wayne fred joey))
(insert-and '(dave dee dozy beeky mick titch))

; 5.20

(define (middle-names sent)
  (bl (bf sent)))

(middle-names '(james paul mccartney))
(middle-names '(bugs bunny))
(middle-names '(john ronald raoul tolkien))

; 5.21

(define (query sent)
  (se (first (bf sent)) (first sent) (bf sent) '?))

(query '(you are experienced))
(query '(i should have known better))

; 6.6

(define (teen? age)
  (and (<= age 19)
       (>= age 13)))

(teen? 20)
(teen? 14)
(teen? 11)
(teen? 19)

; 6.7

(define (type-of sent)
  (cond ((integer? sent) 'number)
        ((sentence? sent) 'sentence)
        ((word? sent) 'word)
        ((boolean? sent) 'boolean)
        (else '(type not found))))

(type-of '(getting better))
(type-of 'revolution)
(type-of (= 3 3))

; 6.8
        
(define (vowel? sent)
  (member? sent 'aeiou))

(define (indef-article sent)
  (if (vowel? (first sent))
      (se 'an sent)
      (se 'a sent)))

(indef-article 'beatle)
(indef-article 'album)

; 6.9

(define (thismany number wd)
  (if (equal? number 1)
      (se number wd)
      (se number (word wd 's))))

(thismany 1 'partridge)
(thismany 3 'french-hen)

; 6.10

(define (sort2 sent)
  (if (>= (first sent) (last sent))
      (se (last sent) (first sent))
      sent))

(sort2 '(5 7))
(sort2 '(7 5))

; 6.12

(define (vowel? sent)
  (member? sent '(aeiou)))

(define (secondlast sent)
  (last (bl sent)))

(define (plural wd)
  (cond
    ((and
      (equal? (last wd) 'y)
      (vowel? (secondlast wd)))
     (word wd 's))
    ((equal? (last wd) 'y)
         (word (bl wd) 'ies))
        ((equal? (last wd) 'x)
         (word wd 'es))
        (else (word wd 's))))

(plural 'boy)
(plural 'beatle)
(plural 'computer)
(plural 'fly)
(plural 'box)

; 6.13

;(define (findlast name)
;  (cond ((equal? (last name) 'jr)
;         (se (bl name)))
;        ((equal? (last name) 'ii)
;         (se (bl name)))
;        ((equal? (last name) 'iii)
;         (se (bl name)))
;        ((equal? (last name) 'sr)
;         (se (bl name)))
;        (se name)))

; rewritten using if/or

(define (findlast name)
  (if (or (equal? (last name) 'jr)
          (equal? (last name) 'ii)
          (equal? (last name) 'iii)
          (equal? (last name) 'sr))
      (se (bl name))
      (se name)))

(define (greet name)
  (cond ((equal? (first name) 'professor)
         (se '(i hope i am not bothering you) 'professor (last (findlast name))))
        ((equal? (first name) 'queen)
         (se '(hello your majesty)))
        ((equal? (last name) 'livingstone)
         (se '(dr livingstone i presume)))
        ((equal? (first name) 'doctor)
         (se '(hello dr) (last (findlast name))))
        (else (se '(good to see you) (first name)))))

(greet '(john lennon))
(greet '(doctor marie curie))
(greet '(doctor martin luther king jr))
(greet '(queen elizabeth))
(greet '(david livingstone))

; 6.14

(define (describe-time time)
  (cond ((> time 86400) (se (/ time 86400) 'days))
        ((> time 3600) (se (/ time 3600) 'hours))
        ((> time 60) (se (/ time 60) 'minutes))
        (else (se time 'seconds))))

(describe-time 45)
(describe-time 930)
(describe-time 30000000000)

; 7.3

; (define (superlative adjective word)
;   (se (word adjective 'est) word))

; can't use legit procedure names as part of a function like that. the computer will always evaluate "word" as it's defintion as a primative

(define (superlative adjective wd)
  (se (word adjective 'est) wd))

(superlative 'dumb 'cat)

; 8.4

(define (vowel? wd)
  (member? wd 'aeiou))
(define (ends-vowel? wd)
  (vowel? (last wd)))
(define (even-count? wd)
  (even? (count wd)))

(define (choose-beatles function)
  (keep function '(john paul george ringo)))

(choose-beatles ends-vowel?)
(choose-beatles even-count?)

; 8.5

(define (amazify name)
  (word 'the-amazing- name))

(define (transform-beatles procedure)
  (every procedure '(john paul george ringo)))

(transform-beatles amazify)
(transform-beatles butfirst)

; 9.7

(define (letterwords ltr wd)
  (keep
   (lambda (wd) (member? ltr wd)) wd))

(trace letterwords)

(letterwords 'o '(got to get you into my life))
(letterwords 'o '(gone))
(letterwords 'e '(this is real and you are completely unprepared))

; 8.6

(define (nato sent)
  (cond ((equal? sent 'a) 'alfa)
        ((equal? sent 'b) 'bravo)
        ((equal? sent 'c) 'charlie)
        ((equal? sent 'd) 'delta)
        ((equal? sent 'e) 'echo)
        ((equal? sent 'f) 'foxtrot)
        ((equal? sent 'g) 'golf)
        ((equal? sent 'h) 'hotel)
        ((equal? sent 'i) 'india)
        ((equal? sent 'j) 'juliett)
        ((equal? sent 'k) 'kilo)
        ((equal? sent 'l) 'lima)
        ((equal? sent 'm) 'mike)
        ((equal? sent 'n) 'november)
        ((equal? sent 'o) 'oscar)
        ((equal? sent 'p) 'papa)
        ((equal? sent 'q) 'quebec)
        ((equal? sent 'r) 'romeo)
        ((equal? sent 's) 'sierra)
        ((equal? sent 't) 'tango)
        ((equal? sent 'u) 'uniform)
        ((equal? sent 'v) 'victor)
        ((equal? sent 'w) 'whiskey)
        ((equal? sent 'x) 'xray)
        ((equal? sent 'y) 'yankee)
        ((equal? sent 'z) 'zulu)
        (else 'huh?)))

(define (words sent)
  (if (empty? sent)
      '()
      (se (nato (first sent))
          (words (bf sent)))))

(words 'cab)
(words 'unicorn)
(words 3)

; 8.7

(define (letter-count sent)
  (accumulate + (every count sent)))

(letter-count '(fixing a hole))
(letter-count 'bat)

(define (double n)
  (* n 2))

(define (hyperbole sent)
  (cond ((equal? sent 'good) 'great)
        ((equal? sent 'bad) 'terrible)
        ((equal? sent 'hungry) 'starving)
        ((equal? sent 'pretty) 'stunning)
        ((equal? sent 'gros) 'repulsive)
        ((equal? sent 'sick) 'dying)
        ((number? sent) (double sent))
        (else sent)))

(define (exaggerate sent)
  (every hyperbole sent))

(exaggerate '(i ate 3 potstickers))
(exaggerate '(the chow fun is good here))

; 8.10

(define (true-for-all? factor sent)
  (= (count sent) (count (keep factor sent))))

(true-for-all? even? '(2 4 6 8))
(true-for-all? even? '(2 6 3 4))

(check-equal? (true-for-all? even? '(2 4 6 8)) #t)
(check-equal? (true-for-all? even? '(2 6 3 4)) #f)

; 8.12

(define (count-ums sent)
  (let ((is-um? (lambda (wd) (equal? wd 'um))))
    (count (keep is-um? sent))))

(trace count-ums)

(count-ums
 '(today um we are going to um talk about functional um programming))

; 8.13

(define (phone-alpha letter)
  (cond ((member? letter 'abc) 2)
        ((member? letter 'def) 3)
        ((member? letter 'ghi) 4)
        ((member? letter 'jkl) 5)
        ((member? letter 'mno) 6)
        ((member? letter 'pqrs) 7)
        ((member? letter 'tuv) 8)
        ((member? letter 'wxyz) 9)
        (else 'huh?)))

(define (phone-unspell wd)
  (se (every phone-alpha wd)))

(phone-unspell 'popcorn)

; 8.14

(define (subword wd start end)
  ((repeated bl (- (count wd) end))
   ((repeated bf (- start 1)) wd)))

(subword 'polythene 5 8)
(subword 'unicorn 4 7)

; 9.4

(define (who sent)
  (every (lambda (wd) (se wd sent)) '(pete roger john keith)))

(who '(did that))
(who '(sucks))

; 9.5

(define (prepend-every addition sent)
  (every (lambda (wd) (word addition wd)) sent))

(prepend-every 's '(he aid he aid))
(prepend-every 'anti '(dote pasto gone body))

; 9.6

(define (square n)
  (* n n))

(define (sentence-version f)
  (lambda (sent) (every f sent)))

((sentence-version first) '(if i fell))
((sentence-version square) '(8 2 4 6))

; 9.7

(define (letterwords letter sent)
  (keep (lambda (wd) (member? letter wd)) sent))

(letterwords 'o '(got to get you into my life))
(letterwords 'e '(this is real and you are completely unprepared))

; 9.8

(define (hang-letter letter guesses)
  (if (member? letter guesses)
      letter
      '(_)))

(define (hang wd guesses)
  (accumulate se
              (every (lambda (sent) (hang-letter sent guesses)) wd)))

(hang 'potsticker 'etaoi)
(hang 'elephant 'aeiou)
(hang 'elephant 'tea)

; 9.9

(define (common-words first second)
  (keep (lambda (wd) (member? wd second)) first))

(common-words '(wicked and divine)
              '(this is real and you are completely unprepared))

; 9.10

(define (appearances first second)
  (count (keep (lambda (wd) (equal? first wd)) second)))

(appearances 'a 'apple)
(appearances 2 19482758020)
(appearances 'this '(this is real and you are completely unprepared))

; 11.1

(define (downup4 wd)
  (se wd
      (bl wd)
      (bl (bl wd))
      (first wd)
      (bl (bl wd))
      (bl wd)
      wd))

(trace downup4)

(downup4 'paul)

; 11.2

(define (count-ums sent)
  (if (equal? (count sent) 0)
      0
      (if (equal? 'um (first sent))
          (+ 1 (count-ums (bf sent)))
          (count-ums (bf sent)))))

(count-ums
 '(today um we are going to um talk about the combining um method))

; 11.3

(define (unspell-letter letter)
  (cond ((member? letter 'abc) 2)
        ((member? letter 'def) 3)
        ((member? letter 'ghi) 4)
        ((member? letter 'jkl) 5)
        ((member? letter 'mno) 6)
        ((member? letter 'prs) 7)
        ((member? letter 'tuv) 8)
        ((member? letter 'wxy) 9)
        (else 0)))

(define (phone-unspell wd)
  (if (empty? wd)
      '()
      (se (unspell-letter (first wd))
          (phone-unspell (bf wd)))))

(phone-unspell 'popcorn)












